/*
 * Copyright (c) 2023 Flamwenco
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

// Combo helper
#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <1>; \
  };

/ {
        combos {
            compatible = "zmk,combos";
            
            /* Function keys */
            COMBO(fnone,   &kp F1,  1 16)
            COMBO(ftwo,    &kp F2,  2 16)
            COMBO(fthree,  &kp F3,  3 16)
            COMBO(ffour,   &kp F4,  4 16)
            COMBO(ffive,   &kp F5,  5 16)
            COMBO(fsix,    &kp F6,  6 16)
            COMBO(fseven,  &kp F7,  7 16)
            COMBO(feight,  &kp F8,  8 16)
            COMBO(fnine,   &kp F9,  9 16)
            COMBO(ften,    &kp F10, 10 16)
            COMBO(feleven, &kp F11, 1 17)
            COMBO(ftwelve, &kp F12, 2 17)
        };

        behaviors {
            as: auto_shift {
                compatible = "zmk,behavior-hold-tap";
                label = "AUTO_SHIFT";
                #binding-cells = <2>;
                tapping_term_ms = <135>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &kp TAB       &kp Q    &kp W    &kp E &kp R &kp T  /**/  &kp Y  &kp U  &kp I     &kp O    &kp P     &kp BSPC
   &mt LCTRL ESC &kp A    &kp S    &kp D &kp F &kp G  /**/  &kp H  &kp J  &kp K     &kp L    &kp RET
   &kp LSHFT     &kp Z    &kp X    &kp C &kp V &kp B  /**/  &kp N  &kp M  &kp COMMA &kp DOT  &kp FSLH
   &mo 3         &kp LALT &kp LGUI &lt 2 SPACE        /**/  &lt 1 SPACE   &kp RALT  &kp RGUI &mo 3
                        >;

                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
                };

                lower_layer {
                        bindings = <
   AS(GRAVE) AS(N1)  AS(N2)  AS(N3)  AS(N4)  AS(N5)  /**/  AS(N6)     AS(N7)      AS(N8)     AS(N9)    AS(N0)    &kp DEL
   &trans    &none   &none   &none   &kp F   &kp G   /**/  AS(LBKT)   AS(MINUS)   AS(EQUAL)  AS(SEMI)  &trans
   &trans    &none   &none   &none   &none   &none   /**/  AS(RBKT)   AS(APOS)    AS(BSLH)   &none     &none
   &trans    &trans  &trans  &trans                  /**/  &trans                 &trans     &trans    &trans
                        >;

                        sensor-bindings = <&inc_dec_kp C_PREV C_NEXT>;
                };

                raise_layer {
                        bindings = <
   &none     &none   &kp C_VOL_DN &kp C_MUTE   &kp C_VOL_UP  &none  /**/  &none      &kp C_PREV  &kp C_PP   &kp C_NEXT &none    &kp DEL
   &trans    &none   &none        &none        &none         &none  /**/  &kp LEFT   &kp DOWN    &kp UP     &kp RIGHT  &trans
   &trans    &none   &none        &none        &none         &none  /**/  &none      &none       &none      &none      &none
   &trans    &trans  &trans       &trans                            /**/  &trans                 &trans     &trans     &trans
                        >;

                        sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
                };

                extra_layer {
                        bindings = <
   &none      &none        &none        &none        &none        &none         /**/  &none  &none  &none  &none  &none  &none  &none
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4  /**/  &none  &none  &none  &none  &none  &none  &none
   &none      &none        &none        &none        &none        &none         /**/  &none  &none  &none  &none  &none  &none
   &trans     &trans       &trans       &trans                                  /**/  &trans               &trans &trans &trans
                        >;

                        sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
                };
        };
};
